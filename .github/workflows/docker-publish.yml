name: Docker Publish & Deploy

concurrency:
  group: production
  cancel-in-progress: true

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_to_production: 
        description: 'Deploy the service to production'
        required: true
        type: boolean
        default: true

# env:
#   SERVICE_NAME: essence-wars-service
#   APP_PORT: 30001

jobs:
  push_to_registry:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Get the version
        id: pkg
        run: echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v3 
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            APP_PORT=${{ vars.APP_PORT }}
          tags: | 
            ghcr.io/${{ github.repository }}:${{ steps.pkg.outputs.version }}
            ghcr.io/${{ github.repository }}:latest

  deploy_to_production:
    name: Deploy Docker image to production
    needs: push_to_registry
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Execute deployment commands over SSH
        uses: appleboy/ssh-action@v1.0.1
        with:
          host: ${{ secrets.PRODUCTION_SERVER_HOST }}
          username: ${{ secrets.PRODUCTION_SERVER_USERNAME }}
          key: ${{ secrets.PRODUCTION_SERVER_PRIVATE_KEY }}
          port: ${{ secrets.PRODUCTION_SERVER_SSH_PORT }}
          passphrase: ${{ secrets.PRODUCTION_SERVER_PASSPHRASE }}
          script: |
            docker pull ghcr.io/${{ github.repository }}:latest
            docker stop ${{ vars.SERVICE_NAME }} || true
            docker rm ${{ vars.SERVICE_NAME }} || true
            docker run --name ${{ vars.SERVICE_NAME }} -d -p ${{ vars.APP_PORT }}:${{ vars.APP_PORT }} ghcr.io/${{ github.repository }}:latest
  